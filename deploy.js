require('dotenv').config();
const ethers = require("ethers");
const fs = require("fs-extra")

async function main() {
    // http://127.0.0.1:7545
    // console.log(process.env.SERVER_LINK);
    // console.log(process.env.PRIVATE_ADDRESS);
    const provider = new ethers.JsonRpcProvider(process.env.SERVER_LINK)
    // const wallet = new ethers.Wallet(process.env.PRIVATE_ADDRESS, provider);
    const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8")
    let wallet = ethers.Wallet.fromEncryptedJsonSync(encryptedJson, process.env.PRIVATE_ADDRESS_PASSWORD);
    wallet = await wallet.connect(provider);
    const abi = fs.readFileSync("./SimpleS.abi", "utf-8")
    const binary = fs.readFileSync("./SimpleS.bin", "utf-8")
    const cFact = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying...");
    const contract = await cFact.deploy();
    const depReceipt = await contract.deploymentTransaction().wait(1);
    // console.log(contract);
    // console.log(depReceipt);

    // console.log("Deploying with only transaction data")
    // const nonce = await wallet.getNonce();
    // const tx = {
    //     nonce: nonce,
    //     gasPrice: 20000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x60806040526040518060400160405280601481526020016040518060400160405280600481526020017f5961736800000000000000000000000000000000000000000000000000000000815250815250600160008201518160000155602082015181600101908161007091906102d5565b50505034801561007f57600080fd5b506103a7565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061010657607f821691505b602082108103610119576101186100bf565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026101817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610144565b61018b8683610144565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006101d26101cd6101c8846101a3565b6101ad565b6101a3565b9050919050565b6000819050919050565b6101ec836101b7565b6102006101f8826101d9565b848454610151565b825550505050565b600090565b610215610208565b6102208184846101e3565b505050565b5b818110156102445761023960008261020d565b600181019050610226565b5050565b601f8211156102895761025a8161011f565b61026384610134565b81016020851015610272578190505b61028661027e85610134565b830182610225565b50505b505050565b600082821c905092915050565b60006102ac6000198460080261028e565b1980831691505092915050565b60006102c5838361029b565b9150826002028217905092915050565b6102de82610085565b67ffffffffffffffff8111156102f7576102f6610090565b5b61030182546100ee565b61030c828285610248565b600060209050601f83116001811461033f576000841561032d578287015190505b61033785826102b9565b86555061039f565b601f19841661034d8661011f565b60005b8281101561037557848901518255600182019150602085019450602081019050610350565b86831015610392578489015161038e601f89168261029b565b8355505b6001600288020188555050505b505050505050565b6103d2806103b66000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806323fd0e4014610051578063312a59f81461006f5780633afd9f061461008e578063c8295830146100ac575b600080fd5b6100596100c8565b60405161006691906101a0565b60405180910390f35b6100776100ce565b60405161008592919061024b565b60405180910390f35b610096610168565b6040516100a391906101a0565b60405180910390f35b6100c660048036038101906100c191906102ac565b610171565b005b60005481565b60018060000154908060010180546100e590610308565b80601f016020809104026020016040519081016040528092919081815260200182805461011190610308565b801561015e5780601f106101335761010080835404028352916020019161015e565b820191906000526020600020905b81548152906001019060200180831161014157829003601f168201915b5050505050905082565b60008054905090565b60018161017e9190610368565b60008190555050565b6000819050919050565b61019a81610187565b82525050565b60006020820190506101b56000830184610191565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101f55780820151818401526020810190506101da565b60008484015250505050565b6000601f19601f8301169050919050565b600061021d826101bb565b61022781856101c6565b93506102378185602086016101d7565b61024081610201565b840191505092915050565b60006040820190506102606000830185610191565b81810360208301526102728184610212565b90509392505050565b600080fd5b61028981610187565b811461029457600080fd5b50565b6000813590506102a681610280565b92915050565b6000602082840312156102c2576102c161027b565b5b60006102d084828501610297565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061032057607f821691505b602082108103610333576103326102d9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061037382610187565b915061037e83610187565b925082820190508082111561039657610395610339565b5b9291505056fea2646970667358221220285c07392955b4dab02a4cf5787d049813af61ce70615c24133517fc24ea543c64736f6c63430008120033",
    //     chainId: 5777,
    // }
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);
    const storeResp = await contract.storeS(12);
    console.log(await storeResp.wait(1));
    const myNum = await contract.retreiveS();
    console.log(myNum);

}


main()
    .then(() => process.exit(0))
    .catch((err) => {
        console.error(err);
        process.exit(1);
    })
